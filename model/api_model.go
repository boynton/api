//
// Generated by sadl
//
package model

import(
	"encoding/json"
	"fmt"

 	"github.com/boynton/data"
)

//
// BaseType
//
type BaseType int

const (
    _ BaseType = iota
    Null
    Bool
    Int8
    Int16
    Int32
    Int64
    Float32
    Float64
    Decimal
    Blob
    String
    Timestamp
    Array
    Object
    List
    Map
    Struct
    Enum
    Union
)

var namesBaseType = []string{
    Null: "Null",
    Bool: "Bool",
    Int8: "Int8",
    Int16: "Int16",
    Int32: "Int32",
    Int64: "Int64",
    Float32: "Float32",
    Float64: "Float64",
    Decimal: "Decimal",
    Blob: "Blob",
    String: "String",
    Timestamp: "Timestamp",
    Array: "Array",
    Object: "Object",
    List: "List",
    Map: "Map",
    Struct: "Struct",
    Enum: "Enum",
    Union: "Union",
}

func (e BaseType) String() string {
    return namesBaseType[e]
}

func (e BaseType) MarshalJSON() ([]byte, error) {
    return json.Marshal(e.String())
}

func (e *BaseType) UnmarshalJSON(b []byte) error {
    var s string
    err := json.Unmarshal(b, &s)
    if err == nil {
        for v, s2 := range namesBaseType {
            if s == s2 {
                *e = BaseType(v)
                return nil
             }
        }
        err = fmt.Errorf("Bad enum symbol for type BaseType: %s", s)
    }
    return err
}

//
// Identifier
//
type Identifier string

//
// Namespace
//
type Namespace string

//
// AbsoluteIdentifier
//
type AbsoluteIdentifier string

//
// TypeDef
//
type TypeDef struct {
    Id AbsoluteIdentifier `json:"id"`
    Base BaseType `json:"base"`
    Comment string `json:"comment,omitempty"`
    MinValue *data.Decimal `json:"minValue,omitempty"`
    MaxValue *data.Decimal `json:"maxValue,omitempty"`
    MinSize int64 `json:"minSize,omitempty"`
    MaxSize int64 `json:"maxSize,omitempty"`
    Pattern string `json:"pattern,omitempty"`
    Items AbsoluteIdentifier `json:"items,omitempty"`
    Keys AbsoluteIdentifier `json:"keys,omitempty"`
    Fields []*FieldDef `json:"fields,omitempty"`
    Elements []*EnumElement `json:"elements,omitempty"`
    Tags []string `json:"tags,omitempty"`
}


//
// FieldDef
//
type FieldDef struct {
    Name string `json:"name,omitempty"`
    Type AbsoluteIdentifier `json:"type,omitempty"`
    Required bool `json:"required,omitempty"`
    Comment string `json:"comment,omitempty"`
}


//
// EnumElement
//
type EnumElement struct {
    Symbol Identifier `json:"symbol"`
    Value string `json:"value,omitempty"`
    Type AbsoluteIdentifier `json:"type,omitempty"`
    Comment string `json:"comment,omitempty"`
}


//
// OperationDef
//
type OperationDef struct {
    Id AbsoluteIdentifier `json:"id"`
    Comment string `json:"comment,omitempty"`
    HttpMethod string `json:"httpMethod,omitempty"`
    HttpUri string `json:"httpUri,omitempty"`
    Input *OperationInput `json:"input,omitempty"`
    Output *OperationOutput `json:"output,omitempty"`
    Exceptions []*OperationOutput `json:"exceptions,omitempty"`
}


//
// OperationInput
//
type OperationInput struct {
    Id AbsoluteIdentifier `json:"id,omitempty"`
    Fields []*OperationInputField `json:"fields,omitempty"`
    Comment string `json:"comment,omitempty"`
}


//
// OperationInputField
//
type OperationInputField struct {
    Name Identifier `json:"name"`
    Type AbsoluteIdentifier `json:"type"`
    Required bool `json:"required,omitempty"`
    Comment string `json:"comment,omitempty"`
    HttpHeader Identifier `json:"httpHeader,omitempty"`
    HttpQuery Identifier `json:"httpQuery,omitempty"`
    HttpPath bool `json:"httpPath,omitempty"`
    HttpPayload bool `json:"httpPayload,omitempty"`
}


//
// OperationOutput
//
type OperationOutput struct {
    Id AbsoluteIdentifier `json:"id,omitempty"`
    HttpStatus int32 `json:"httpStatus,omitempty"`
    Fields []*OperationOutputField `json:"fields,omitempty"`
    Comment string `json:"comment,omitempty"`
}


//
// OperationOutputField
//
type OperationOutputField struct {
    Name Identifier `json:"name"`
    Type AbsoluteIdentifier `json:"type"`
    Comment string `json:"comment,omitempty"`
    HttpHeader Identifier `json:"httpHeader,omitempty"`
    HttpPayload bool `json:"httpPayload,omitempty"`
}


//
// ServiceDef
//
type ServiceDef struct {
    Id AbsoluteIdentifier `json:"id"`
    Version string `json:"version,omitempty"`
    Comment string `json:"comment,omitempty"`
    Types []*TypeDef `json:"types,omitempty"`
    Operations []*OperationDef `json:"operations,omitempty"`
}
