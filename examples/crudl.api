// 
// A simple service to demonstrate CRUDL operations
// 
namespace example
service CrudlService

// 
// Create an item
// 
operation CreateItem (method=POST, url="/items", resource=ItemResource, lifecycle=create) {
    input {
        data ItemData (required, payload)
    }
    output (status=201) {
        item Item (payload)
    }
    exceptions [BadRequest]
}

// 
// Get an existing item
// 
operation GetItem (method=GET, url="/items/{itemId}", resource=ItemResource, lifecycle=read) {
    input {
        itemId String (required, path)
    }
    output (status=200) {
        item Item (payload)
    }
    exceptions [NotFound]
}

// 
// Update an existing item
// 
operation UpdateItem (method=PUT, url="/items/{itemId}", resource=ItemResource, lifecycle=update) {
    input {
        itemId String (required, path)
        item Item (required, payload)
    }
    output (status=200) {
        item Item (payload)
    }
    exceptions [NotFound, BadRequest]
}

// 
// Delete an existing item
// 
operation DeleteItem (method=DELETE, url="/items/{itemId}", resource=ItemResource, lifecycle=delete) {
    input {
        itemId String (required, path)
    }
    output (status=204) {
    }
    exceptions [NotFound]
}

// 
// List existing items
// 
operation ListItems (method=GET, url="/items", resource=ItemResource, lifecycle=list) {
    input {
        limit Int32 (query="limit")
        skip String (query="skip")
    }
    output (status=200) {
        listing ItemListing (payload)
    }
}

// 
// An operation exception representing bad client input to a request
// 
exception BadRequest (status=400) {
    info ExceptionInfo (payload)
}

// 
// An operation exception representing that a resource was not found
// 
exception NotFound (status=404) {
    info ExceptionInfo (payload)
}

// 
// Data to create an Item
// 
type ItemData Struct {
    title String (required)
    attributes AttributeList
}

type AttributeList List[Attribute]

type Attribute Struct {
    key String
    val String
}

// 
// The Item resource itself
// 
type Item Struct {
    id String (required) // the id of the item
    title String (required)
    attributes AttributeList // attributes of the Item
    modified Timestamp // when the item was last last modified
}

// 
// Info for the body of an exception, what is encoded on the wire in exception
// responses
// 
type ExceptionInfo Struct {
    message String
}

// 
// The ItemListing is a paginated segment of the collection of items, with an
// optional continuation token
// 
type ItemListing Struct {
    items ItemList (required)
    next String
}

// 
// A list of Items
// 
type ItemList List[Item]

