/* Generated from smithy source */


//
// Create the item. The item with the updated modified time is returned.
//
http POST "/items" (operation=CreateItem) {
	item Item (required)

	expect 201 {
		item Item
	}
	except 400 BadRequest
}

//
// Get the item with the specified id. Conditional response is provided to avoid sending the item
// over the wire if it has not changed.
//
http GET "/items/{id}" (operation=GetItem) {
	id ItemId (required)
	ifNewer Timestamp (header="If-Modified-Since")

	expect 200 {
		item Item
		modified Timestamp (header="Modified")
	}
	except 304 NotModified
	except 404 NotFound
}

//
// Update the item. The item with the updated modified time is returned.
//
http PUT "/items/{id}" (operation=PutItem) {
	id ItemId (required)
	item Item (required)

	expect 200 {
		item Item
	}
	except 400 BadRequest
}

//
// Delete the item from the store.
//
http DELETE "/items/{id}" (operation=DeleteItem) {
	id ItemId (required)

	expect 204
	except 404 NotFound
}

//
// List the items. By default only 10 items are returned, but that can be overridden with a query
// parameter. If more items are available than the limit, then a "next" token is returned, which
// can be provided with a subsequent call as the "skip" query parameter.
//
http GET "/items?limit={limit}&skip={skip}" (operation=ListItems) {
	limit Int32
	skip ItemId

	expect 200 {
		items ItemListing
	}
}

//
// Items use this restricted string as an identifier
//
type ItemId String (pattern="^[a-zA-Z_][a-zA-Z_0-9]*$")

//
// The items to be stored.
//
type Item Struct{
    id ItemId (required)
    modified Timestamp
    data String
}

//
// A paginated list of items
//
type ItemListing Struct{
    items ItemListingItems (required)
    next ItemId
}

//
// If not modified, this is the response, with no content. "NotModified" is only used for the app
// to throw the exception. i.e. in Java: throw new ServiceException(new NotModified())
//
type NotModified Struct{
    message String
}

type BadRequest Struct{
    message String
}

type NotFound Struct{
    message String
}

type ItemListingItems Array<Item> // list
