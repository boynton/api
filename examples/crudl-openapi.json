{
  "components": {
    "schemas": {
      "BadRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "Item": {
        "type": "object",
        "description": "\nThe items to be stored.\n",
        "required": [
          "id"
        ],
        "properties": {
          "data": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ItemId"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ItemId": {
        "type": "string",
        "description": "\nItems use this restricted string as an identifier\n",
        "pattern": "^[a-zA-Z_][a-zA-Z_0-9]*$"
      },
      "ItemListing": {
        "type": "object",
        "description": "\nA paginated list of items\n",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "$ref": "#/components/schemas/ItemListingItems"
          },
          "next": {
            "$ref": "#/components/schemas/ItemId"
          }
        }
      },
      "ItemListingItems": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Item"
        }
      },
      "NotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "NotModified": {
        "type": "object",
        "description": "\nIf not modified, this is the response, with no content. \"NotModified\" is only used for the app\nto throw the exception. i.e. in Java: throw new ServiceException(new NotModified())\n",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      }
    }
  },
  "info": {
    "title": "Crudl",
    "version": "1"
  },
  "openapi": "3.0.0",
  "paths": {
    "/items": {
      "get": {
        "summary": "\nList the items. By default only 10 items are returned, but that can be overridden with a query\nparameter. If more items are available than the limit, then a \"next\" token is returned, which\ncan be provided with a subsequent call as the \"skip\" query parameter.\n",
        "operationId": "listItems",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ItemId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemListing"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "\nCreate the item. The item with the updated modified time is returned.\n",
        "operationId": "createItem",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Item"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Expected response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "400": {
            "description": "Exceptional response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      }
    },
    "/items/{id}": {
      "delete": {
        "summary": "\nDelete the item from the store.\n",
        "operationId": "deleteItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ItemId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Expected response"
          },
          "404": {
            "description": "Exceptional response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "\nGet the item with the specified id. Conditional response is provided to avoid sending the item\nover the wire if it has not changed.\n",
        "operationId": "getItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ItemId"
            }
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response",
            "headers": {
              "Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "304": {
            "description": "\nIf not modified, this is the response, with no content. \"NotModified\" is only used for the app\nto throw the exception. i.e. in Java: throw new ServiceException(new NotModified())\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotModified"
                }
              }
            }
          },
          "404": {
            "description": "Exceptional response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "\nUpdate the item. The item with the updated modified time is returned.\n",
        "operationId": "putItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ItemId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Item"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "400": {
            "description": "Exceptional response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000"
    }
  ]
}

