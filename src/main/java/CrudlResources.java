//
// This file generated by rdl 1.5.2. Do not modify!
//

import com.yahoo.rdl.*;
import java.util.*;
import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.inject.Inject;

@Path("/crudl")
public class CrudlResources {

    @POST
    @Path("/items")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Item postItem(Item item) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            Item e = this.delegate.postItem(context, item);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, BadRequest.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource postItem");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/items/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public void getItem(@PathParam("id") String id, @HeaderParam("If-Modified-Since") Timestamp ifNewer) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            GetItemResult result = new GetItemResult(context);
            this.delegate.getItem(context, id, ifNewer, result);
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_MODIFIED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getItem");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/items/{id}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Item putItem(@PathParam("id") String id, Item item) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            Item e = this.delegate.putItem(context, id, item);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putItem");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/items/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public Item deleteItem(@PathParam("id") String id) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            Item e = this.delegate.deleteItem(context, id);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteItem");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/items")
    @Produces(MediaType.APPLICATION_JSON)
    public ItemListing getItemListing(@QueryParam("skip") Integer skip, @QueryParam("limit") Integer limit) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            ItemListing e = this.delegate.getItemListing(context, skip, limit);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getItemListing");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }


    WebApplicationException typedException(int code, ResourceException e, Class<?> eClass) {
        Object data = e.getData();
        Object entity = eClass.isInstance(data) ? data : null;
        if (entity != null) {
            return new WebApplicationException(Response.status(code).entity(entity).build());
        } else {
            return new WebApplicationException(code);
        }
    }

    @Inject private CrudlHandler delegate;
    @Context private HttpServletRequest request;
    @Context private HttpServletResponse response;
    
}
